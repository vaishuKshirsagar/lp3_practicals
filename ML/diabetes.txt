import numpy as np
import pandas as pd

# Reading the dataset
data = pd.read_csv('diabetes.csv')
data.head()

data.isnull().sum()


data.shape


import numpy as np
import pandas as pd
# Replace 0 with NaN and fill NaN with column mean rounded
for column in data.columns[1:-3]:
    data[column] = data[column].replace(0, np.NaN)
    data[column] = data[column].fillna(round(data[column].mean(skipna=True)))

# Display first 10 rows to verify
print(data.head(10))


X = data.iloc[:, :8] #Features
Y = data.iloc[:, 8:] #Predictor


#Perform Spliting
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)


import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score
from sklearn.datasets import load_iris

# Load a dataset for example
data = load_iris()
X = data.data
Y = data.target

# Split the dataset
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Initialize and fit the KNN classifier
knn = KNeighborsClassifier()
knn_fit = knn.fit(X_train, Y_train)
knn_pred = knn_fit.predict(X_test)

print("Confusion Matrix")
print(confusion_matrix(Y_test, knn_pred))
print("Accuracy Score:", accuracy_score(Y_test, knn_pred))
print("Recall Score:", recall_score(Y_test, knn_pred, average='weighted'))  # average='weighted' for multiclass
print("F1 Score:", f1_score(Y_test, knn_pred, average='weighted'))  # average='weighted' for multiclass
print("Precision Score:", precision_score(Y_test, knn_pred, average='weighted'))  # average='weighted' for multiclass


from sklearn.model_selection import cross_val_score 
import numpy as np
#create a new KNN model
knn_cv = KNeighborsClassifier(n_neighbors=3)
#train model with cv of 5
cv_scores = cross_val_score(knn_cv, X, Y, cv=5)
#print each cv score (accuracy) and average them print(cv_scores)
print(cv_scores)
print('cv_scores mean:{}'.format(np.mean(cv_scores)))



from sklearn.model_selection import GridSearchCV
#create new a knn model
knn2 = KNeighborsClassifier()
#create a dictionary of all values we want to test for n_neighbors 
param_grid = {'n_neighbors': np.arange(1, 25)}
#use gridsearch to test all values for n_neighbors 
knn_gscv = GridSearchCV(knn2, param_grid, cv=5)
#fit model to data
knn_gscv.fit(X, Y)
knn_gscv.best_params_


knn_gscv.best_score_