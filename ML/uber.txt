#importing libraries
import pandas as pd 
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

#loading the dataset
df = pd.read_csv('uber.csv') 
df

#drops unnecessary columns like unnamed , key 
df = df.drop(['Unnamed: 0', 'key', 'pickup_datetime'], axis = 1) 
df.dropna(inplace=True) #drops rows having missing values 

sns.boxplot(df['fare_amount']) #displays fare_amount boxplot with seaborn to understand the distribution and identify outliers

plt.boxplot(df['fare_amount']) #display fare_amount boxplot

corr = df.corr() #Displays Correlation Heatmap: Calculates correlations between features and visualizes them with a heatmap.
sns.heatmap(corr, annot=True)

# Train Test Split
from sklearn.model_selection import train_test_split
X = df.drop(['fare_amount'], axis=1)
y = df['fare_amount']
X_train, x_test, y_train, y_test = train_test_split(X, y)

#Training of linear regression model 
from sklearn.linear_model import LinearRegression 
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(x_test)

#Evaluation of linear regression model
from sklearn.metrics import mean_squared_error, r2_score 
RMSE = np.sqrt(mean_squared_error(y_test, y_pred))
print("RMSE -> ", RMSE)
R2 = r2_score(y_test, y_pred)
print("R2 -> ", R2)

#Training of Random forest model 
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor()
model.fit(X_train, y_train)
y_pred = model.predict(x_test)

#Evaluation of Random forest model
from sklearn.metrics import mean_squared_error, r2_score
RMSE = np.sqrt(mean_squared_error(y_test, y_pred))
print("RMSE -> ", RMSE)
R2 = r2_score(y_test, y_pred)
print("R2 -> ", R2)